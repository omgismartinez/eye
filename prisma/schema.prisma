generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Image {
  id         String      @id @default(cuid())
  eye        Eye
  label      String
  url        String      @db.Text
  camera     String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  diagnostic Diagnostic?

  labelKey  Label   @relation(fields: [label], references: [key], onUpdate: Cascade)
  disease   Disease @relation(fields: [diseaseId], references: [id], onUpdate: Cascade)
  diseaseId String

  @@index([label], name: "label")
  @@index([diseaseId], name: "diseaseId")
}

model Disease {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  key         String       @unique
  diagnostics Diagnostic[]
  images      Image[]
  labels      Label[]
}

model Label {
  id          String       @id @default(cuid())
  key         String       @unique
  name        String
  description String?      @db.Text
  disease     Disease      @relation(fields: [name], references: [name], onUpdate: Cascade)
  images      Image[]
  diagnostics Diagnostic[]

  @@index([name], name: "name")
}

model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  role      Role     @default(PATIENT)
  metadata  Json?
  started   Boolean  @default(false)
  doctor    Doctor?
  patient   Patient?
}

model Doctor {
  id          String       @id @default(cuid())
  firstName   String
  lastName    String
  specialty   String
  gender      Gender
  age         Int
  birthdate   DateTime
  address     String?
  email       String       @unique
  phone       String
  diagnostics Diagnostic[]
  patients    Patient[]

  user User @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)
}

model Patient {
  id          String       @id @default(cuid())
  firstName   String
  lastName    String
  gender      Gender
  age         Int
  dob         DateTime
  occupation  String?
  address     String?
  email       String       @unique
  phone       String
  diagnostics Diagnostic[]
  doctor      Doctor[]

  user User @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)
}

model Diagnostic {
  id             String   @id @default(cuid())
  eye            Eye
  prediction     String
  classification Json
  extra          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  label        Label   @relation(fields: [prediction], references: [key], onUpdate: Cascade)
  doctor       Doctor  @relation(fields: [doctorId], references: [id], onUpdate: Cascade)
  patient      Patient @relation(fields: [patientEmail], references: [email], onUpdate: Cascade)
  disease      Disease @relation(fields: [diseaseId], references: [id], onUpdate: Cascade)
  image        Image   @relation(fields: [imageId], references: [id], onUpdate: Cascade)
  doctorId     String
  patientEmail String
  diseaseId    String
  imageId      String  @unique

  @@index([prediction], name: "prediction")
  @@index([doctorId], name: "doctorId")
  @@index([patientEmail], name: "patientEmail")
  @@index([diseaseId], name: "diseaseId")
}

enum Gender {
  M
  F
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
  RESEARCHER
  DEVELOPER
}

enum Eye {
  LEFT
  RIGHT
}
